#!/usr/bin/ruby

require 'chef'
require 'chef/knife'
require 'chef/search/query'
require 'json'
require 'highline'

def get_health(node)
  begin
    JSON.parse(`ssh #{node.ec2.public_hostname} curl -s http://localhost:9200/_cluster/health`)
  rescue => e
    puts "#{node.name}: error parsing JSON: #{e.message}"
    nil
  end
end

Chef::Knife.new.configure_chef

rows, start, total = Chef::Search::Query.new.search(:node, "role:elasticsearch_ebs")
rows.reject! {|node| !ARGV.include? node.elasticsearch.cluster } unless ARGV.empty?
clusters = rows.group_by {|node| node.elasticsearch.cluster rescue node.app_environment }

clusters.each do |cluster, nodes|
  if es = get_health(nodes[rand(nodes.size)])
    node_count = "#{es['number_of_data_nodes']} + #{es['number_of_nodes'] - es['number_of_data_nodes']}"
    status = HighLine.new.color(es['status'], es['status'].to_sym)
    shard_types = %w{active active_primary relocating initializing unassigned}
    shard_info = shard_types.select {|t| es[t+'_shards'] > 0 }.map {|t| "#{es[t+'_shards']} #{t}" }
    puts "#{cluster} (#{node_count} nodes) is #{status}: #{shard_info.join(', ')}"
  end
end
